const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const dotenv = require('dotenv');
const nodemailer = require('nodemailer'); // –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ—á—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å

dotenv.config();

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const YANDEX_TRACKER_URL = process.env.YANDEX_TRACKER_URL;
const YANDEX_TRACKER_ORG_ID = process.env.YANDEX_TRACKER_ORG_ID;
const YANDEX_TRACKER_OAUTH_TOKEN = process.env.YANDEX_TRACKER_OAUTH_TOKEN;
const YANDEX_TRACKER_QUEUE = process.env.YANDEX_TRACKER_QUEUE;

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

const states = {};
const SUMMARY = 'SUMMARY';
const DESCRIPTION = 'DESCRIPTION';
const EMAIL = 'EMAIL';
const VERIFICATION = 'VERIFICATION';

const allowedDomains = ['kurganmk', 'reftp', 'hobbs-it'];
const emailVerificationCodes = {}; // –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

const transporter = nodemailer.createTransport({
    host: 'connect.smtp.bz', // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ—Å—Ç
    port: 587, // –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    secure: false, // true –¥–ª—è 465 –ø–æ—Ä—Ç–∞, false –¥–ª—è –¥—Ä—É–≥–∏—Ö
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    }
});

const sendVerificationEmail = async (email, code) => {
    const htmlContent = `
        <div style="font-family: Arial, sans-serif; line-height: 1.5; color: #333;">
            <h2 style="color: #4CAF50;">–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</h2>
            <p>–í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: <strong style="font-size: 1.2em;">${code}</strong></p>
            <p>–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.</p>
            <p>–°–ø–∞—Å–∏–±–æ!</p>
            <p style="color: #999; font-size: 0.9em;">–≠—Ç–æ –ø–∏—Å—å–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
        </div>
    `;

    try {
        await transporter.sendMail({
            from: process.env.EMAIL_USER,
            to: email,
            subject: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            html: htmlContent
        });
        console.log('Verification email sent successfully');
    } catch (error) {
        console.error('Error sending verification email:', error);
        throw error; // –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ—à–∏–±–∫–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
    }
};

const replyKeyboard = {
    reply_markup: {
        keyboard: [['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', '‚ùå –û—Ç–º–µ–Ω–∞']],
        one_time_keyboard: true,
        resize_keyboard: true,
    },
};

const removeKeyboard = {
    reply_markup: {
        remove_keyboard: true,
    },
};

const createTask = async (summary, description, login) => {
    const headers = {
        'Authorization': `OAuth ${YANDEX_TRACKER_OAUTH_TOKEN}`,
        'X-Cloud-Org-ID': YANDEX_TRACKER_ORG_ID,
        'Content-Type': 'application/json',
    };

    const data = {
        summary,
        description,
        queue: YANDEX_TRACKER_QUEUE,
        followers: [login], // Adding the login to the followers field
        author: login
    };

    try {
        const response = await axios.post(YANDEX_TRACKER_URL, data, { headers });
        return response.data;
    } catch (error) {
        console.error('Error creating task:', error.response ? error.response.data : error.message);
        throw error;
    }
};

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    // –û—á–∏—Å—Ç–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    delete states[chatId];
    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:', replyKeyboard);
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    console.log('Received message:', text);
    console.log('Current state:', states[chatId]);

    if (text === 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É') {
        states[chatId] = { state: SUMMARY };
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.', removeKeyboard);
    } else if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
        delete states[chatId]; // –û—á–∏—Å—Ç–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.sendMessage(chatId, '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.', replyKeyboard);
    } else if (states[chatId] && states[chatId].state === SUMMARY) {
        states[chatId].summary = text;
        states[chatId].state = DESCRIPTION;
        bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.', {
            reply_markup: {
                keyboard: [['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞']],
                one_time_keyboard: true,
                resize_keyboard: true,
            },
        });
    } else if (states[chatId] && states[chatId].state === DESCRIPTION) {
        if (text === 'üîô –ù–∞–∑–∞–¥') {
            states[chatId].state = SUMMARY;
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.', removeKeyboard);
        } else {
            states[chatId].description = text;
            states[chatId].state = EMAIL;
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É.', {
                reply_markup: {
                    keyboard: [['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞']],
                    one_time_keyboard: true,
                    resize_keyboard: true,
                },
            });
        }
    } else if (states[chatId] && states[chatId].state === EMAIL) {
        if (text === 'üîô –ù–∞–∑–∞–¥') {
            states[chatId].state = DESCRIPTION;
            bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.', {
                reply_markup: {
                    keyboard: [['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞']],
                    one_time_keyboard: true,
                    resize_keyboard: true,
                },
            });
        } else {
            const email = text;
            const emailParts = email.split('@');
            const domain = emailParts[1] ? emailParts[1].split('.')[0] : '';
            
            if (!allowedDomains.includes(domain)) {
                bot.sendMessage(chatId, '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–æ–º–µ–Ω –ø–æ—á—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–æ–º–µ–Ω–æ–º (kurganmk, reftp, hobbs-it).', {
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞']],
                        one_time_keyboard: true,
                        resize_keyboard: true,
                    },
                });
            } else {
                const login = emailParts[0];
                const code = Math.floor(100000 + Math.random() * 900000); // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
                emailVerificationCodes[chatId] = code; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                
                try {
                    await sendVerificationEmail(email, code);
                    states[chatId].email = email;
                    states[chatId].state = VERIFICATION;
                    bot.sendMessage(chatId, '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –ï—Å–ª–∏ –∫–æ–¥–∞ –Ω–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ –ø–æ—á—Ç—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É –°–ø–∞–º', {
                        reply_markup: {
                            keyboard: [['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞']],
                            one_time_keyboard: true,
                            resize_keyboard: true,
                        },
                    });
                } catch (error) {
                    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.', replyKeyboard);
                }
            }
        }
    } else if (states[chatId] && states[chatId].state === VERIFICATION) {
        if (text === 'üîô –ù–∞–∑–∞–¥') {
            states[chatId].state = EMAIL;
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É.', {
                reply_markup: {
                    keyboard: [['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞']],
                    one_time_keyboard: true,
                    resize_keyboard: true,
                },
            });
        } else {
            const enteredCode = parseInt(text, 10);
            if (emailVerificationCodes[chatId] && emailVerificationCodes[chatId] === enteredCode) {
                const { summary, description, email } = states[chatId];
                const login = email.split('@')[0];
                const updatedDescription = `${description}\n\n–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞: ${email}`;

                try {
                    const task = await createTask(summary, updatedDescription, login);
                    const responseMessage = `–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${task.key || '–ù–µ—Ç –∫–ª—é—á–∞'} - https://tracker.yandex.ru/${task.key}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É - –ø–∏—à–∏—Ç–µ –≤ —Ç–∞—Å–∫ –≤ —Ç—Ä–µ–∫–µ—Ä–µ (–≤–Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ). –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ç–æ–º—É, –∫–∞–∫ –æ–±—â–∞—Ç—å—Å—è –≤ –¢—Ä–µ–∫–µ—Ä–µ: https://wiki.yandex.ru/users/mbannykh/sapport.-pervaja-linija/instrukcija-po-jandeks-trekeru/`;
                    bot.sendMessage(chatId, responseMessage, replyKeyboard);
                } catch (error) {
                    bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`, replyKeyboard);
                }
            } else {
                bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
                    reply_markup: {
                        keyboard: [['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞']],
                        one_time_keyboard: true,
                        resize_keyboard: true,
                    },
                });
            }
        }
    }
});
