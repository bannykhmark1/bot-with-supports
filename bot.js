const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const dotenv = require('dotenv');
const nodemailer = require('nodemailer');
const { Sequelize, TelegramUser, MessageLog } = require('./models');

dotenv.config();

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const YANDEX_TRACKER_URL = process.env.YANDEX_TRACKER_URL;
const YANDEX_TRACKER_ORG_ID = process.env.YANDEX_TRACKER_ORG_ID;
const YANDEX_TRACKER_OAUTH_TOKEN = process.env.YANDEX_TRACKER_OAUTH_TOKEN;
const YANDEX_TRACKER_QUEUE = process.env.YANDEX_TRACKER_QUEUE;

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

const states = {};
const SUMMARY = 'SUMMARY';
const DESCRIPTION = 'DESCRIPTION';
const EMAIL = 'EMAIL';
const VERIFICATION = 'VERIFICATION';
const BUSINESS_UNIT = 'BUSINESS_UNIT';
const PHONE_NUMBER = 'PHONE_NUMBER';

const allowedDomains = ['kurganmk', 'reftp', 'hobbs-it', 'skhp-ural'];
const emailVerificationCodes = {};

const transporter = nodemailer.createTransport({
    host: 'connect.smtp.bz',
    port: 587,
    secure: false,
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
    },
});

const sendVerificationEmail = async (email, code) => {
    const htmlContent = `
        <div style="font-family: Arial, sans-serif; line-height: 1.5; color: #333;">
            <h2 style="color: #4CAF50;">–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</h2>
            <p>–í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: <strong style="font-size: 1.2em;">${code}</strong></p>
            <p>–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.</p>
            <p>–°–ø–∞—Å–∏–±–æ!</p>
            <p style="color: #999; font-size: 0.9em;">–≠—Ç–æ –ø–∏—Å—å–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
        </div>
    `;

    try {
        await transporter.sendMail({
            from: process.env.EMAIL_USER,
            to: email,
            subject: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            html: htmlContent,
        });
        console.log('Verification email sent successfully');
    } catch (error) {
        console.error('Error sending verification email:', error);
        throw error;
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
const replyKeyboard = {
    reply_markup: {
        keyboard: [['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', '‚ùå –û—Ç–º–µ–Ω–∞'], ['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
        one_time_keyboard: true,
        resize_keyboard: true,
    },
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∏–∑–Ω–µ—Å-–µ–¥–∏–Ω–∏—Ü—ã
const businessUnitsKeyboard = {
    reply_markup: {
        keyboard: [
            ['–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –ö–ú–ö', '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ü–∏—è –ö–ú–ö'],
            ['–†–ü–§', '–°–ö–•–ü', '–ö–°–ö'],
            ['–†–æ–∑–Ω–∏—Ü–∞', 'Pervafood', '–•–ª–µ–±–æ–∫–æ–º–±–∏–Ω–∞—Ç ‚Ññ1', '–£–ê–ì'],
            ['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']
        ],
        one_time_keyboard: true,
        resize_keyboard: true,
    },
};

const createTask = async (summary, description, login) => {
    const headers = {
        'Authorization': `OAuth ${YANDEX_TRACKER_OAUTH_TOKEN}`,
        'X-Cloud-Org-ID': YANDEX_TRACKER_ORG_ID,
        'Content-Type': 'application/json',
    };

    const data = {
        summary,
        description,
        queue: YANDEX_TRACKER_QUEUE,
        followers: [login],
        author: login,
        tags: ['tg'],
    };

    try {
        const response = await axios.post(YANDEX_TRACKER_URL, data, { headers });
        return response.data;
    } catch (error) {
        console.error('Error creating task:', error.response ? error.response.data : error.message);
        throw error;
    }
};

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    delete states[chatId];

    const user = await TelegramUser.findByPk(chatId);
    if (user) {
        bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:', replyKeyboard);
    } else {
        bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:', {
            reply_markup: {
                remove_keyboard: true,
                keyboard: [['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
            }
        });
        states[chatId] = { state: EMAIL };
    }
});

bot.onText(/\/logout/, async (msg) => {
    const chatId = msg.chat.id;
    await TelegramUser.destroy({ where: { telegramId: chatId } });
    delete states[chatId];
    bot.sendMessage(chatId, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞:', {
        reply_markup: {
            remove_keyboard: true,
            keyboard: [['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
        }
    });
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text?.trim() || '';

    console.log('Received message:', text);
    console.log('Current state:', states[chatId]);

    try {
        if (text) {
            await MessageLog.create({ telegramId: chatId, message: text });
        }
    } catch (error) {
        console.error('Error logging message:', error);
    }

    const currentState = states[chatId]?.state;

    if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
        delete states[chatId];
        bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', replyKeyboard);
        return;
    } 

    if (text === 'üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞') {
        await TelegramUser.destroy({ where: { telegramId: chatId } });
        delete states[chatId];
        bot.sendMessage(chatId, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞:', {
            reply_markup: {
                remove_keyboard: true,
                keyboard: [['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
            }
        });
        return;
    } 

    switch (currentState) {
        case EMAIL:
            handleEmailInput(chatId, text);
            break;
        case VERIFICATION:
            handleVerificationInput(chatId, text);
            break;
        case SUMMARY:
            handleSummaryInput(chatId, text);
            break;
        case DESCRIPTION:
            handleDescriptionInput(chatId, text);
            break;
        case PHONE_NUMBER:
            handlePhoneNumberInput(chatId, text);
            break;
        case BUSINESS_UNIT:
            handleBusinessUnitInput(chatId, text);
            break;
        default:
            if (text === 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É') {
                startTaskCreation(chatId);
            } else {
                bot.sendMessage(chatId, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.', replyKeyboard);
            }
            break;
    }
});

const handleEmailInput = async (chatId, email) => {
    const emailParts = email.split('@');
    const domain = emailParts[1]?.split('.')[0];

    if (!allowedDomains.includes(domain)) {
        bot.sendMessage(chatId, '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–æ–º–µ–Ω –ø–æ—á—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–æ–º–µ–Ω–æ–º (kurganmk, reftp, hobbs-it).', {
            reply_markup: {
                remove_keyboard: true,
                keyboard: [['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
            }
        });
        return;
    }

    const code = Math.floor(100000 + Math.random() * 900000);
    emailVerificationCodes[chatId] = code;

    try {
        await sendVerificationEmail(email, code);
        states[chatId] = { state: VERIFICATION, email };
        bot.sendMessage(chatId, '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ï—Å–ª–∏ –∫–æ–¥–∞ –Ω–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ –ø–æ—á—Ç—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É –°–ø–∞–º.', {
            reply_markup: {
                remove_keyboard: true,
                keyboard: [['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
            }
        });
    } catch (error) {
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.', replyKeyboard);
    }
};

const handleVerificationInput = async (chatId, code) => {
    if (emailVerificationCodes[chatId] === parseInt(code, 10)) {
        const email = states[chatId].email;
        await TelegramUser.create({ telegramId: chatId, email });
        delete states[chatId];
        bot.sendMessage(chatId, '–ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:', replyKeyboard);
    } else {
        bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
            reply_markup: {
                remove_keyboard: true,
                keyboard: [['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
            }
        });
    }
};

const startTaskCreation = async (chatId) => {
    const user = await TelegramUser.findByPk(chatId);
    if (user) {
        states[chatId] = { state: BUSINESS_UNIT };
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å-–µ–¥–∏–Ω–∏—Ü—É:', businessUnitsKeyboard);
    } else {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, –≤–≤–µ–¥—è —Å–≤–æ—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É.', {
            reply_markup: {
                remove_keyboard: true,
                keyboard: [['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
            }
        });
    }
};

const handleSummaryInput = (chatId, summary) => {
    if (summary.trim() === '') {
        bot.sendMessage(chatId, '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.', {
            reply_markup: {
                remove_keyboard: true,
                keyboard: [['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
            }
        });
    } else {
        states[chatId].summary = summary;
        states[chatId].state = DESCRIPTION;
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.', {
            reply_markup: {
                remove_keyboard: true,
                keyboard: [['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞'], ['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
                one_time_keyboard: true,
                resize_keyboard: true,
            }
        });
    }
};

const handleDescriptionInput = (chatId, description) => {
    if (description.trim() === '') {
        bot.sendMessage(chatId, '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.', {
            reply_markup: {
                remove_keyboard: true,
                keyboard: [['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
            }
        });
    } else {
        states[chatId].description = description;
        states[chatId].state = PHONE_NUMBER;
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.', {
            reply_markup: {
                remove_keyboard: true,
                keyboard: [['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞'], ['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
                one_time_keyboard: true,
                resize_keyboard: true,
            }
        });
    }
};

const handlePhoneNumberInput = async (chatId, phoneNumber) => {
    if (!/^\+?\d{10,15}$/.test(phoneNumber)) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä).', {
            reply_markup: {
                remove_keyboard: true,
                keyboard: [['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞'], ['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
                one_time_keyboard: true,
                resize_keyboard: true,
            }
        });
        return;
    }

    const summary = `[${states[chatId].businessUnit}] ${states[chatId].summary}`;
    const description = `${states[chatId].description}\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏: ${phoneNumber}`;
    const user = await TelegramUser.findByPk(chatId);
    const login = user.email.split('@')[0];

    try {
        const task = await createTask(summary, description, login);
        bot.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º: ${task.key}: https://tracker.yandex.ru/${task.key}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É - –ø–∏—à–∏—Ç–µ –≤ —Ç–∞—Å–∫ –≤ —Ç—Ä–µ–∫–µ—Ä–µ (–≤–Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ). –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ç–æ–º—É, –∫–∞–∫ –æ–±—â–∞—Ç—å—Å—è –≤ –¢—Ä–µ–∫–µ—Ä–µ: https://wiki.yandex.ru/users/mbannykh/sapport.-pervaja-linija/instrukcija-po-jandeks-trekeru/`, replyKeyboard);
    } catch (error) {
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', replyKeyboard);
    }

    delete states[chatId];
};

const handleBusinessUnitInput = (chatId, businessUnit) => {
    states[chatId].businessUnit = businessUnit;
    states[chatId].state = SUMMARY;
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.', {
        reply_markup: {
            remove_keyboard: true,
            keyboard: [['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞'], ['üîì –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞']],
            one_time_keyboard: true,
            resize_keyboard: true,
        }
    });
};
